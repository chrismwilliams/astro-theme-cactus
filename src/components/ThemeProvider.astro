{/* Inlined to avoid FOUC. */}
<script is:inline>
    const lightModePref = window.matchMedia("(prefers-color-scheme: light)");

    function getUserPref() {
        // Force dark mode regardless of stored preference
        return "dark";
    }

    function setTheme(newTheme) {
		if (newTheme !== "light" && newTheme !== "dark") {
			return console.warn(
				`Invalid theme value '${newTheme}' received. Expected 'light' or 'dark'.`,
			);
		}

		const root = document.documentElement;

		// root already set to newTheme, exit early
		if (newTheme === root.getAttribute("data-theme")) {
			return;
		}

        root.setAttribute("data-theme", newTheme);
        // Keep Tailwind's class-based dark mode in sync to avoid FOUC
        root.classList.toggle("dark", newTheme === "dark");

		const colorThemeMetaTag = document.querySelector("meta[name='theme-color']");
		const bgColour = getComputedStyle(document.body).getPropertyValue("--theme-bg");
		colorThemeMetaTag.setAttribute("content", `hsl(${bgColour})`);
		if (typeof localStorage !== "undefined") {
			localStorage.setItem("theme", newTheme);
		}
	}

    // initial setup
    setTheme(getUserPref());

	// View Transitions hook to restore theme
	document.addEventListener("astro:after-swap", () => setTheme(getUserPref()));

	// listen for theme-change custom event, fired in src/components/ThemeToggle.astro
    document.addEventListener("theme-change", () => {
        // Ignore external requests and keep dark mode forced
        setTheme("dark");
    });

	// listen for prefers-color-scheme change.
    lightModePref.addEventListener("change", () => setTheme("dark"));
</script>
