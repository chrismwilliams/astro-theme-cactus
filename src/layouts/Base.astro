---
import type { SiteMeta } from "@/types";

import BaseHead from "@/components/BaseHead.astro";
import SkipLink from "@/components/SkipLink.astro";
import ThemeProvider from "@/components/ThemeProvider.astro";
import Footer from "@/components/layout/Footer.astro";
import Header from "@/components/layout/Header.astro";
import { siteConfig } from "@/site-config";
// import { gsap } from "gsap";

interface Props {
	meta: SiteMeta;
}

const {
	meta: { articleDate, description = siteConfig.description, ogImage, title },
} = Astro.props;
---

<html lang={siteConfig.lang}>
	<head>
		<BaseHead articleDate={articleDate} description={description} ogImage={ogImage} title={title} />
		<!-- <script is:inline src="https://cdn.jsdelivr.net/npm/gsap@3/dist/gsap.min.js"></script> -->
	</head>
	<body>
		<ThemeProvider />
		<SkipLink />
		<Header />
		<main id="main">
			<slot />
		</main>
		<!-- <script>
		window.addEventListener("load", () => {
			const svgNS = "http://www.w3.org/2000/svg";
			const count = 10; // Reduced number of sparkles for a sober effect
			const width = window.innerWidth;
			const height = window.innerHeight;

			// Create SVG element
			const svg = document.createElementNS(svgNS, "svg");
			svg.setAttribute("width", width.toString());
			svg.setAttribute("height", height.toString());
			svg.style.position = "fixed";
			svg.style.top = "0";
			svg.style.left = "0";
			svg.style.zIndex = "-1";
			document.body.appendChild(svg);

			// Function to create sparkle
			const createSparkle = () => {
			const fillColor = document.documentElement.getAttribute("data-theme") === "dark" ? "white" : "black";
			const x = Math.random() * width;
			const y = -10;

			// Create a group to hold the star parts
			const starGroup = document.createElementNS(svgNS, "g");
			starGroup.setAttribute("transform", `translate(${x}, ${y})`);
			svg.appendChild(starGroup);

			// Create the 4-branch star using small rectangles
			const createRect = (x: number, y: number) => {
				const rect = document.createElementNS(svgNS, "rect");
				rect.setAttribute("width", "2");
				rect.setAttribute("height", "2");
				rect.setAttribute("fill", fillColor);
				rect.setAttribute("x", x.toString());
				rect.setAttribute("y", y.toString());
				starGroup.appendChild(rect);
			};

			// Center part
			createRect(0, 0);
			// Top branch
			createRect(0, -1);
			// Bottom branch
			createRect(0, 1);
			// Left branch
			createRect(-1, 0);
			// Right branch
			createRect(1, 0);

			gsap.set(starGroup, { opacity: 0 });
			gsap.to(starGroup, {
				opacity: 1,
				y: height + 10,
				duration: Math.random() * 3 + 2,
				ease: "ease-in",
				onComplete: () => {
				starGroup.remove();
				}
			});
			};

			// Generate initial sparkles
			for (let i = 0; i < count; i++) {
			setTimeout(createSparkle, i * 100);
			}

			// Continue creating sparkles
			setInterval(createSparkle, 200);
		});
		</script> -->
		<Footer />
	</body>
</html>
